{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CF2UMGsBOqIC"
      },
      "outputs": [],
      "source": [
        "import numpy as np, pandas as pd\n",
        "rng = np.random.default_rng(42)\n",
        "n = 1000\n",
        "\n",
        "sources = rng.choice([\"Retail\",\"Inbound\",\"Outbound\",\"Referral\",\"Events\"], n, p=[.45,.2,.18,.12,.05])\n",
        "owners  = rng.choice([\"Matt\",\"Alex\",\"Jordan\",\"Sam\",\"Taylor\"], n)\n",
        "created = pd.to_datetime(\"2025-01-01\") + pd.to_timedelta(rng.integers(0, 90*24, n), unit=\"h\")\n",
        "\n",
        "# Funnel stages\n",
        "appt_set   = rng.binomial(1, 0.55, n)\n",
        "appt_show  = np.where(appt_set==1, rng.binomial(1, 0.80, n), 0)\n",
        "qualified  = np.where(appt_show==1, rng.binomial(1, 0.70, n), 0)\n",
        "proposal   = np.where(qualified==1, rng.binomial(1, 0.65, n), 0)\n",
        "closed_won = np.where(proposal==1, rng.binomial(1, 0.40, n), 0)\n",
        "\n",
        "# Amounts & cycle time\n",
        "deal_size  = np.where(closed_won==1, rng.normal(3500, 900, n).clip(500, 10000), 0).round(0)\n",
        "cycle_days = np.where(closed_won==1, rng.integers(7, 45, n), rng.integers(2, 25, n))\n",
        "\n",
        "# Hygiene\n",
        "tasks_overdue = rng.poisson(0.6, n)\n",
        "last_touch_days = rng.integers(0, 21, n)\n",
        "\n",
        "df = pd.DataFrame({\n",
        "    \"lead_id\": range(1,n+1),\n",
        "    \"owner\": owners,\n",
        "    \"source\": sources,\n",
        "    \"created_at\": created,\n",
        "    \"appt_set\": appt_set,\n",
        "    \"appt_show\": appt_show,\n",
        "    \"qualified\": qualified,\n",
        "    \"proposal\": proposal,\n",
        "    \"closed_won\": closed_won,\n",
        "    \"deal_size\": deal_size,\n",
        "    \"cycle_days\": cycle_days,\n",
        "    \"tasks_overdue\": tasks_overdue,\n",
        "    \"last_touch_days\": last_touch_days\n",
        "})\n",
        "\n",
        "df.to_csv(\"data/synthetic_pipeline.csv\", index=False)\n",
        "df.head()\n"
      ]
    }
  ]
}